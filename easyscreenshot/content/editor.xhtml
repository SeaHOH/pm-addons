<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html [
  <!ENTITY % lmDTD SYSTEM "chrome://easyscreenshot/locale/snapshot.dtd">
  %lmDTD;
]>
<html xmlns="http://www.w3.org/1999/xhtml">
    <title>&editor.title;</title>
    <script type="text/javascript">
    <![CDATA[
    window.ssInstalled = true;
    (function() {

    Components.utils.import("resource://easyscreenshot/snapshot.js");
    var Utils = {
        parse: function(element) {
            return {
                x: parseInt(element.style.left, 10),
                y: parseInt(element.style.top, 10),
                w: parseInt(element.style.width, 10),
                h: parseInt(element.style.height, 10),
            }
        },
        qs: function(selector) document.querySelector(selector),
        contains: function(node, otherNode) {
            if (node.contains) {
                return node.contains(otherNode);
            } else {
                // not really equivalent, but enough here
                return [].some.call(node.children, function(n) n == otherNode);
            }
        }
    };
    var CropOverlay = {
        _listeners: {},
        _overlay: {},
        _status: {
            isMoving: false,
            isResizing: false,
            isNew: false,
        },
        _dblclick: function(evt) {
            Editor.current = {textContent: 'Crop'};
        },
        _display: function(x, y, w, h, ix, iy, iw, ih) {
            this._displayItem(this._overlay.overlay, x, y, w, h);
            this._displayItem(this._overlay.top, 0, 0, w, iy);
            this._displayItem(this._overlay.right, ix + iw, iy, w - (ix + iw), ih);
            this._displayItem(this._overlay.bottom, 0, iy + ih, w, h - (iy + ih));
            this._displayItem(this._overlay.left, 0, iy, ix, ih);
            this._displayItem(this._overlay.target, (iw ? ix : -5), (ih ? iy: -5), iw, ih);
            this._overlay.overlay.style.display = '';
        },
        _displayItem: function(element, x, y, w, h) {
            element.style.left = x + 'px';
            element.style.top = y + 'px';
            element.style.width = w + 'px';
            element.style.height = h + 'px';
        },
        _hide: function() {
            this._overlay.overlay.style.display = 'none';
        },
        _mousedown: function(evt) {
            var { x, y } = Utils.parse(this._overlay.overlay);
            var { x:ix, y:iy } = Utils.parse(this._overlay.target);
            var rx = evt.pageX - x;
            var ry = evt.pageY - y;
            if (this._overlay.target == evt.target) {
                this._status.isMoving = [rx - ix, ry - iy];
            } else if (Utils.contains(this._overlay.target, evt.target)) {
                this._status.isResizing = evt.target.id;
            } else {
                this._status.isNew = [rx, ry];
            }
            document.addEventListener('mousemove', this._listeners.mousemove, false);
            document.addEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _mousemove: function(evt) {
            var { x, y, w, h } = Utils.parse(this._overlay.overlay);
            var { x:ix, y:iy, w:iw, h:ih } = Utils.parse(this._overlay.target);
            var rx = evt.pageX - x;
            var ry = evt.pageY - y;
            var nix, niy, nih, niw;
            if (this._status.isNew) {
                var startXY = this._status.isNew;
                rx = Math.min(Math.max(rx, 0), w);
                ry = Math.min(Math.max(ry, 0), h);
                nix = Math.min(startXY[0], rx);
                niy = Math.min(startXY[1], ry);
                nih = Math.abs(ry - startXY[1]);
                niw = Math.abs(rx - startXY[0]);
            } else if (this._status.isMoving) {
                var origXY = this._status.isMoving;
                nix = rx - origXY[0];
                niy = ry - origXY[1];
                nih = ih;
                niw = iw;
                nix = Math.min(Math.max(nix, 0), w - niw);
                niy = Math.min(Math.max(niy, 0), h - nih);
            } else if (this._status.isResizing) {
                switch(this._status.isResizing) {
                    case 'ctrlnw':
                        nix = Math.min(Math.max(rx, 0), ix + iw - 50);
                        niy = Math.min(Math.max(ry, 0), iy + ih - 50);
                        nih = ih - (niy - iy);
                        niw = iw - (nix - ix);
                        break;
                    case 'ctrlne':
                        nix = ix;
                        niy = Math.min(Math.max(ry, 0), iy + ih - 50);
                        nih = ih - (niy - iy);
                        niw = Math.min(Math.max(rx - nix, 50), w - nix);
                        break;
                    case 'ctrlse':
                        nix = ix;
                        niy = iy;
                        nih = Math.min(Math.max(ry - niy, 50), h - niy);
                        niw = Math.min(Math.max(rx - nix, 50), w - nix);
                        break;
                    case 'ctrlsw':
                        nix = Math.min(Math.max(rx, 0), ix + iw - 50);
                        niy = iy;
                        nih = Math.min(Math.max(ry - niy, 50), h - niy);
                        niw = iw - (nix - ix);
                        break;
                    default:
                        break;
                }
            }
            this._display(x, y, w, h, nix, niy, niw, nih);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _mouseup: function(evt) {
            this._status = {
                isMoving: false,
                isResizing: false,
                isNew: false,
            }
            document.removeEventListener('mousemove', this._listeners.mousemove, false);
            document.removeEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _refreshImageData: function() {
            var { x, y, w, h } = Utils.parse(this._overlay.target);
            if (!h || !w) {
                return;
            }
            Editor.canvasData = Editor.ctx.getImageData(x, y, w, h);
        },
        init: function() {
            this._overlay = {
                overlay: Utils.qs('#crop'),
                top:     Utils.qs('#croptop'),
                right:   Utils.qs('#cropright'),
                bottom:  Utils.qs('#cropbottom'),
                left:    Utils.qs('#cropleft'),
                target:  Utils.qs('#croptarget'),
            };
            this._listeners['dblclick'] = this._dblclick.bind(this);
            this._listeners['mousedown'] = this._mousedown.bind(this);
            this._listeners['mousemove'] = this._mousemove.bind(this);
            this._listeners['mouseup'] = this._mouseup.bind(this);
            this._hide();
        },
        start: function(x, y, w, h) {
            this._display(x, y, w, h, 0, 0, 0, 0);
            this._overlay.overlay.addEventListener('dblclick', this._listeners.dblclick, false);
            this._overlay.overlay.addEventListener('mousedown', this._listeners.mousedown, false);
        },
        cancel: function() {
            this._hide();
            this._overlay.overlay.removeEventListener('dblclick', this._listeners.dblclick, false);
            this._overlay.overlay.removeEventListener('mousedown', this._listeners.mousedown, false);
        },
        stop: function() {
            this._refreshImageData();
            Editor.updateHistory();
        }
    };
    var BaseControl = {
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origRect: null,
        _rect: null,
        _startxy: null,
//               _dir's value
//
//                  |
//               2  |  1
//             -----------
//               3  |  4
//                  |
//

        _dir: 1,
        _mousedown: function(evt) {
            var rx = evt.pageX - this._origRect[0];
            var ry = evt.pageY - this._origRect[1];
            this._startxy = [rx, ry];
            document.addEventListener('mousemove', this._listeners.mousemove, false);
            document.addEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _mousemove: function(evt) {
            var x = this._origRect[0];
            var y = this._origRect[1];
            var rx = Math.min(Math.max(evt.pageX - x, 0), this._origRect[2]);
            var ry = Math.min(Math.max(evt.pageY - y, 0), this._origRect[3]);
            var x = Math.min(rx, this._startxy[0]);
            var y = Math.min(ry, this._startxy[1]);
            var w = Math.abs(rx - this._startxy[0]);
            var h = Math.abs(ry - this._startxy[1]);
            if (evt.shiftKey) {
                w = Math.min(w, h);
                h = Math.min(w, h);
                if (x != this._startxy[0]) {
                    x = this._startxy[0] - w;
                }
                if (y != this._startxy[1]) {
                    y = this._startxy[1] - h;
                }
            }
            if(rx > this._startxy[0] && ry < this._startxy[1])
              this._dir = 1;
            else if(rx < this._startxy[0] && ry < this._startxy[1])
              this._dir = 2;
            else if(rx < this._startxy[0] && ry > this._startxy[1])
              this._dir = 3;
            else if(rx > this._startxy[0] && ry > this._startxy[1])
              this._dir = 4;
            this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);
            this._rect = [x, y, w, h];
            var dx = Math.min(3, x);
            var dy = 3;
            var dw = Math.min(x + w + 3, this._origRect[2]) - x + dx;
            var dh = Math.min(y + h + 3, this._origRect[3]) - y + dy;
            x += this._origRect[0];
            y += this._origRect[1];
            this._canvas.style.left = x - dx + 'px';
            this._canvas.style.top = y - dy + 'px';
            this._canvas.left = x - dx;
            this._canvas.top = y - dy;
            this._canvas.width = dw;
            this._canvas.height = dh;
            this._ctx.lineWidth = 3.0;
            this._ctx.strokeStyle = Color.selected;
            this._ctx.save();
            this._stroke(this._ctx, dx, dy, w, h);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _mouseup: function(evt) {
            document.removeEventListener('mousemove', this._listeners.mousemove, false);
            document.removeEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
            this._refreshImageData();
            Editor.updateHistory();
        },
        _refreshImageData: function() {
            var [x, y, w, h] = this._rect;
            Editor.ctx.lineWidth = 3.0;
            Editor.ctx.strokeStyle = Color.selected;
            Editor.ctx.save();
            this._stroke(Editor.ctx, x, y, w, h);
        },
        _stroke: function(ctx, x, y, w, h) {
        },
        init: function() {
            this._listeners['mousedown'] = this._mousedown.bind(this);
            this._listeners['mousemove'] = this._mousemove.bind(this);
            this._listeners['mouseup'] = this._mouseup.bind(this);
        },
        start: function(x, y, w, h, canvasId, evtName) {
            if (!evtName) {
                evtName = 'mousedown';
            }
            this._canvas = document.createElement('canvas');
            this._ctx = this._canvas.getContext('2d');
            this._canvas.id = canvasId;
            Editor.canvas.className = canvasId;
            document.body.appendChild(this._canvas);
            this._origRect = [x, y, w, h];

            this._canvas.style.left = x + 'px';
            this._canvas.style.top = y + 'px';
            this._canvas.width = 0;
            this._canvas.height = 0;
            this._canvas.addEventListener(evtName, this._listeners[evtName], false);
            Editor.canvas.addEventListener(evtName, this._listeners[evtName], false);
        },
        cancel: function() {
            this._canvas.removeEventListener('mousedown', this._listeners.mousedown, false);
            Editor.canvas.removeEventListener('mousedown', this._listeners.mousedown, false);
            document.body.removeChild(this._canvas);
        }
    };
    var Rect = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origRect: null,
        _rect: null,
        _startxy: null,
        _stroke: function(ctx, x, y, w, h) {
            ctx.strokeRect(x, y, w, h);
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'rectcanvas');
        }
    };
    var Line = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origRect: null,
        _rect: null,
        _startxy: null,
        _stroke: function(ctx, x, y, w, h) {
  					ctx.beginPath();
  					var dir = this._dir;
  				  if(dir == 1 || dir == 3){
    					ctx.moveTo(x, y+h);
    					ctx.lineTo(x+w, y);
  				  } else {
    					ctx.moveTo(x, y);
    					ctx.lineTo(x+w, y+h);
  				  }

  					ctx.stroke();
  					ctx.closePath();
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'linecanvas');
        }
    };
    var Circ = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origRect: null,
        _rect: null,
        _startxy: null,
        _stroke: function(ctx, x, y, w, h) {
            this._strokeCirc(ctx, x, y, w, h);
        },
        _strokeCirc: function(ctx, x, y, w, h) {
            // see http://www.whizkidtech.redprince.net/bezier/circle/kappa/
            var br = (Math.sqrt(2) - 1) * 4 / 3;
            var bx = w * br / 2;
            var by = h * br / 2;
            ctx.beginPath();
            ctx.moveTo(x + w / 2, y);
            ctx.bezierCurveTo(x + w / 2 + bx, y, x + w, y + h / 2 - by, x + w, y + h / 2);
            ctx.bezierCurveTo(x + w, y + h / 2 + by, x + w / 2 + bx, y + h, x + w / 2, y + h);
            ctx.bezierCurveTo(x + w / 2 - bx, y + h, x, y + h / 2 + by, x, y + h / 2);
            ctx.bezierCurveTo(x, y + h / 2 - by, x + w / 2 - bx, y, x + w / 2, y);
            ctx.closePath();
            ctx.stroke();
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'circcanvas');
        }
    };
    var TextInput = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _input: null,
        _listeners: {},
        _origRect: null,
        _blur: function() {
            var msg = this._input.value;
            this._input.value = '';
            var x = parseInt(this._input.style.left, 10) - this._origRect[0];
            var y = parseInt(this._input.style.top, 10) - this._origRect[1];
            if (msg) {
                Editor.ctx.font = 'bold 14px/18px Arial,Helvetica,sans-serif';
                // why the offset ? baseline ?
                Editor.ctx.fillText(msg, x + 1, y + 14 + 1);
                Editor.updateHistory();
            }
        },
        _click: function(evt) {
            this._input.blur();
            Editor.ctx.fillStyle = Color.selected;
            Editor.ctx.save();
            this._input.style.left = evt.pageX + 'px';
            this._input.style.top = Math.min(Math.max(evt.pageY - 7, this._origRect[1]), this._origRect[1] + this._origRect[3] - 20) + 'px';
            this._input.style.width = Math.min(184, this._origRect[0] + this._origRect[2] - evt.pageX) + 'px';
            this._input.style.color = Color.selected;
            this._input.style.borderBottomColor = Color.selected;
            this._input.style.display = '';
            this._input.focus();
        },
        _hide: function() {
            this._input.style.display = 'none';
        },
        init: function() {
            this._input = Utils.qs('#textinput');
            this._hide();
            this._listeners['blur'] = this._blur.bind(this);
            this._listeners['click'] = this._click.bind(this);
            this._input.addEventListener('blur', this._listeners.blur, false);
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'textcanvas', 'click');
        },
        cancel: function() {
            this._input.value = '';
            this._canvas.removeEventListener('click', this._listeners.click, false);
            Editor.canvas.removeEventListener('click', this._listeners.click, false);
            document.body.removeChild(this._canvas);
            this._hide();
        }
    };
    var Blur = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origData: null,
        _bluredData: null,
        _origRect: null,
        _radius: 7,
        _blurAround: function(x, y) {
            var sx = Math.max(0, x - this._radius);
            var sy = Math.max(0, y - this._radius);
            var ex = Math.min(this._origRect[2], x + this._radius);
            var ey = Math.min(this._origRect[3], y + this._radius);
            var dx = Math.min(3, sx);
            var dy = Math.min(3, sy);
            var dw = Math.min(ex + 3, this._origRect[2]) - sx + dx;
            var dh = Math.min(ey + 3, this._origRect[3]) - sy + dy;
            this._origData = Editor.ctx.getImageData(sx - dx, sy - dy, dw, dh);
            this._bluredData = this._origData;
            for (var i = 0; i < this._origData.width; i++) {
                for (var j = 0; j < this._origData.height; j++) {
                    if (Math.pow(i - (x - sx + dx), 2) + Math.pow(j - (y - sy + dy), 2) <= Math.pow(this._radius, 2)) {
                        this._calcBluredData(i, j);
                    }
                }
            }
            Editor.ctx.putImageData(this._bluredData, sx - dx, sy - dy);
        },
        _calcBluredData: function(x, y) {
            var maxradius = Math.min(x, y, this._origData.width - 1 - x, this._origData.height - 1 - y);
            var radius = Math.min(3, maxradius);
            var tmp = [0, 0, 0, 0, 0];
            for (var i = x - radius; i <= x + radius; i++) {
                for (var j = y - radius; j <= y + radius; j++) {
                    for (var k = 0; k < 4; k++) {
                        tmp[k] += this._origData.data[this._xyToIndex(i, j, k)];
                    }
                    tmp[4] += 1;
                }
            }
            for (var i = 0; i < 4; i++) {
                this._bluredData.data[this._xyToIndex(x, y, i)] = Math.floor(tmp[i] / tmp[4]);
            }
        },
        _refreshImageData: function() {
        },
        _xyToIndex: function(x, y, i) {
            return 4 * (y * this._origData.width + x) + i;
        },
        _mousemove: function(evt) {
            var x = this._origRect[0];
            var y = this._origRect[1];
            var rx = Math.min(Math.max(evt.pageX - x, 0), this._origRect[2]);
            var ry = Math.min(Math.max(evt.pageY - y, 0), this._origRect[3]);
            this._blurAround(rx, ry);
            evt.stopPropagation();
            evt.preventDefault();
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'blurcanvas');
        },
        cancel: function() {
            this.__proto__.cancel.bind(this)();
            this._origData = null;
            this._bluredData = null;
        }
    };
    var Pencil = {
        __proto__: BaseControl,
        _canvas: null,
        _ctx: null,
        _listeners: {},
        _origRect: null,
        _radius: 1,
        _draw: function(x, y) {
  					Editor.ctx.lineTo(x, y);
  					Editor.ctx.stroke();
        },
        _mousedown: function(evt) {
            var rx = evt.pageX - this._origRect[0];
            var ry = evt.pageY - this._origRect[1];
            this._startxy = [rx, ry];
            Editor.ctx.lineWidth = 3.0;
            Editor.ctx.strokeStyle = Color.selected;
  					Editor.ctx.moveTo(rx, ry);
  					Editor.ctx.beginPath();
            document.addEventListener('mousemove', this._listeners.mousemove, false);
            document.addEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _mouseup: function(evt) {
  					Editor.ctx.closePath();
            document.removeEventListener('mousemove', this._listeners.mousemove, false);
            document.removeEventListener('mouseup', this._listeners.mouseup, false);
            evt.stopPropagation();
            evt.preventDefault();
            this._refreshImageData();
            Editor.updateHistory();
        },
        _mousemove: function(evt) {
            var x = this._origRect[0];
            var y = this._origRect[1];
            var rx = Math.min(Math.max(evt.pageX - x, 0), this._origRect[2]);
            var ry = Math.min(Math.max(evt.pageY - y, 0), this._origRect[3]);
            this._draw(rx, ry);
            evt.stopPropagation();
            evt.preventDefault();
        },
        _refreshImageData: function() {
        },
        start: function(x, y, w, h) {
            this.__proto__.start.bind(this)(x, y, w, h, 'pencilcanvas');
        },
        cancel: function() {
            this.__proto__.cancel.bind(this)();
        }
    };
    var Color = {
        _colorpicker: null,
        _hoverCss: null,
        _normalCss: null,
        _listeners: {},
        _selected: '#FF0000',
        _usePrefix: false,
        get selected() {
            return this._selected;
        },
        set selected(color) {
            this._selected = color;
            if (this._usePrefix) {
                this._normalCss.style.backgroundImage = '-moz-linear-gradient(bottom, ' + color + ', ' + color + '), -moz-linear-gradient(bottom, #ccc, white)';
                this._hoverCss.style.backgroundImage = '-moz-linear-gradient(bottom, ' + color + ', ' + color + '), -moz-linear-gradient(bottom, white, #ccc)';
            } else {
                this._normalCss.style.backgroundImage = 'linear-gradient(to top, ' + color + ', ' + color + '), linear-gradient(to top, #ccc, white)';
                this._hoverCss.style.backgroundImage = 'linear-gradient(to top, ' + color + ', ' + color + '), linear-gradient(to top, white, #ccc)';
            }
        },
        _click: function(evt) {
            this.toggle();
        },
        _select: function(evt) {
            this.selected = evt.target.color;
            this.toggle();
        },
        init: function() {
            this._colorpicker = document.createElementNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'colorpicker');
            this._colorpicker.id = 'colorpicker';
            document.body.appendChild(this._colorpicker);
            this._listeners['click'] = this._click.bind(this);
            this._listeners['select'] = this._select.bind(this);
            this._colorpicker.addEventListener('select', this._listeners.select, false);
            this.toggle();
            var _cssRules = document.styleSheets[0].cssRules;
            for (var i = 0, l = _cssRules.length; i < l; i++) {
                if (_cssRules[i].selectorText == '#toolbar > li:nth-of-type(1)') {
                    this._normalCss = _cssRules[i];
                    this._usePrefix = /^-moz-/.test(this._normalCss.style.backgroundImage);
                    continue;
                }
                if (_cssRules[i].selectorText == '#toolbar > li:nth-of-type(1):hover') {
                    this._hoverCss = _cssRules[i];
                    continue;
                }
                if (this._normalCss && this._hoverCss) {
                    break;
                }
            }
        },
        toggle: function() {
            if (this._colorpicker.style.display == 'none') {
                this._colorpicker.style.display = '';
                document.addEventListener('click', this._listeners.click, false);
            } else if (this._colorpicker.style.display == '') {
                this._colorpicker.style.display = 'none';
                document.removeEventListener('click', this._listeners.click, false);
            }
        }
    }
    const HISTORY_LENGHT_MAX = 50;
    var Editor = {
        _controls: {
            'Crop': CropOverlay,
            'Rectangle': Rect,
            'Line': Line,
            'Pencil': Pencil,
            'Circle': Circ,
            'Text': TextInput,
            'Blur': Blur
        },
        _canvas: null,
        _ctx: null,
        _current: null,
        _history: [],
        get canvas() {
            return this._canvas;
        },
        set canvas(canvas) {
            this._canvas = canvas;
            this._ctx = this._canvas.getContext('2d');
        },
        get ctx() {
            return this._ctx;
        },
        get canvasData() {
            return this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
        },
        set canvasData(data) {
            this.canvas.width = data.width;
            this.canvas.height = data.height;
            this.ctx.putImageData(data, 0, 0);
        },
        get current() {
            return this._current;
        },
        set current(newCurrent) {
            var oldText = this._current ? this._current.textContent.trim() : '';
            var newText = newCurrent ? newCurrent.textContent.trim() : '';
            //Color should not change current control
            if (newText == 'Color') {
                Color.toggle();
                return;
            }
            //Cancel current control, conditionally crop
            if (oldText) {
                this._current.classList.remove('current');
                this.canvas.className = '';
                this._controls[oldText].cancel();
            }
            if (oldText == 'Crop' && newText == 'Crop') {
                this._controls[newText].stop();
            }
            //No need to set Undo/Local as current control
            if (newText == 'Undo') {
                this._undo();
            }
            if (newText == 'Local') {
                this._saveLocal();
            }
            if (['Undo', 'Local', ''].indexOf(newText) > -1 || oldText == newText) {
                this._current = null;
                return;
            }
            //Set new current control
            newCurrent.classList.add('current');
            this._controls[newText].start(
                parseInt(this.canvas.offsetLeft, 10),
                parseInt(this.canvas.offsetTop, 10),
                parseInt(this.canvas.offsetWidth, 10),
                parseInt(this.canvas.offsetHeight, 10)
            );
            this._current = newCurrent;
            return;
        },
        init: function() {
            this.canvas = Utils.qs('#display');
            this.canvasData = SnapshotStorage.pop();
            this.updateHistory();
            this._disableUndo();
            this._setupToolbar();
            var self = this;
            document.body.addEventListener('keypress', function(evt) {
                if (evt.keyCode == 27) {//Esc
                    self.current = null;
                }
                if (evt.ctrlKey && evt.charCode == 115) {//^S
                    self.current = {textContent: 'Local'};
                    evt.preventDefault();
                }
                if (evt.ctrlKey && evt.charCode == 122) {//^Z
                    self.current = {textContent: 'Undo'};
                }
            }, false);
            [CropOverlay, Rect, Line, Pencil, Circ, TextInput, Blur, Color].forEach(function(control) {
                control.init();
            });
        },
        updateHistory: function() {
            this._history.push(this.canvasData);
            if (this._history.length > HISTORY_LENGHT_MAX) {
                this._history.shift();
                //this._history.splice(1, 1);
            }
            if (this._history.length > 1) {
                this._enableUndo();
            }
        },
        _setupToolbar: function() {
            var self = this;
            [].forEach.call(document.querySelectorAll('#toolbar > li'), function(li) {
                li.addEventListener('click', function(evt) {
                    self.current = evt.target;
                    evt.stopPropagation();
                }, false);
            });
        },
        _undo: function() {
            if(this._history.length > 1) {
                this._history.pop();
                this.canvasData = this._history[this._history.length - 1];
                if (this._history.length <= 1) {
                    this._disableUndo();
                }
            }
        },
        _enableUndo: function() {
            Utils.qs('#toolbar > li:nth-of-type(7)').removeAttribute('disabled');
        },
        _disableUndo: function() {
            Utils.qs('#toolbar > li:nth-of-type(7)').setAttribute('disabled', 'true');
        },
        _saveLocal: function() {
            var { classes: Cc, interfaces: Ci } = Components;
            var _strings = Cc["@mozilla.org/intl/stringbundle;1"].getService(Ci.nsIStringBundleService).createBundle("chrome://easyscreenshot/locale/easyscreenshot.properties");

            var fp = Cc['@mozilla.org/filepicker;1'].createInstance(Ci.nsIFilePicker);
            fp.init(window.parent, _strings.GetStringFromName('saveImageTo'), Ci.nsIFilePicker.modeSave);
            fp.defaultString = _strings.GetStringFromName('SnapFilePrefix') + '_' + (new Date()).toISOString().replace(/:/g, '-') + '.png';
            fp.appendFilter(_strings.GetStringFromName('pngImage'), '*.png');

            if (fp.show() != Ci.nsIFilePicker.returnCancel) {
                var file = Cc['@mozilla.org/file/local;1'].createInstance(Ci.nsILocalFile);
                var path = fp.file.path;
                file.initWithPath(path + (/\.png$/.test(path) ? '' : '.png'));

                var ios = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService);
                var source = ios.newURI(this.canvas.toDataURL("image/png", ""), 'utf8', null);
                var target = ios.newFileURI(file);

                var persist = Cc['@mozilla.org/embedding/browser/nsWebBrowserPersist;1'].createInstance(Ci.nsIWebBrowserPersist);
                persist.persistFlags = Ci.nsIWebBrowserPersist.PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION;

                var transfer = Cc['@mozilla.org/transfer;1'].createInstance(Ci.nsITransfer);
                transfer.init(source, target, '', null, null, null, persist, false);
                persist.progressListener = transfer;

                persist.saveURI(source, null, null, null, null, null, file, null);
                this._history = [];
                window.close();
            }
        },
        _upToXiuxiu: function() {
            if(window.console) {
                console.log('not implemented');
            }
            window.close();
        },
    };
    window.addEventListener('load', function(evt) {
        Editor.init();
    }, false);
    window.addEventListener('beforeunload', function(evt) {
        if (Editor._history.length > 1) {
            evt.preventDefault();
        }
    }, false);

    })();
    ]]>
    </script>
    <style type="text/css">
    body { background: gray; margin: 0; overflow-y: scroll; }
    #toolbar { background-image: -moz-linear-gradient(top, white, #ccc); background-image: linear-gradient(to bottom, white, #ccc); height: 42px; margin: 0; overflow: hidden; position: fixed; top: 0; width: 100%; z-index: 2; -moz-padding-start: 0; }
    #toolbar > li { background-clip: content-box, border-box; background-image: url(chrome://easyscreenshot/skin/editoricons.png); border-right: 1px solid #bbb; cursor: pointer; float: left; height: 27px; list-style: none; padding: 7px 21px; text-indent: -9999px; width: 28px; }
    #toolbar > li:not(:first-of-type) { border-left: 1px solid #eee; }
    #toolbar > li.current, #toolbar > li:hover { background-image: url(chrome://easyscreenshot/skin/editoricons.png), -moz-linear-gradient(bottom, white, #ccc); background-image: url(chrome://easyscreenshot/skin/editoricons.png), linear-gradient(to top, white, #ccc); }
    #toolbar > li:nth-of-type(1) { background-image: -moz-linear-gradient(bottom, red, red), -moz-linear-gradient(bottom, #ccc, white); background-image: linear-gradient(to top, red, red), linear-gradient(to top, #ccc, white); }
    #toolbar > li:nth-of-type(1):hover { background-image: -moz-linear-gradient(bottom, red, red), -moz-linear-gradient(bottom, white, #ccc); background-image: linear-gradient(to top, red, red), linear-gradient(to top, white, #ccc); }
    #toolbar > li:nth-of-type(2) { background-position: 21px 7px, 0 0; }
    #toolbar > li:nth-of-type(3) { background-position: -7px 7px, 0 0; }
    #toolbar > li:nth-of-type(4) { background-position: -35px 7px, 0 0; }
    #toolbar > li:nth-of-type(5) { background-position: -63px 7px, 0 0; }
    #toolbar > li:nth-of-type(6) { background-position: -91px 7px, 0 0; }
    #toolbar > li:nth-of-type(7) { background-position: -119px 7px, 0 0; }
    #toolbar > li:nth-of-type(8) { background-position: -147px 7px, 0 0; }
    #toolbar > li:nth-of-type(9) { background-position: -203px 7px, 0 0; }
    #toolbar > li:nth-of-type(9)[disabled='true'] { background-position: -203px 35px, 0 0; }
    #toolbar > li:nth-of-type(9):hover[disabled='true'] { background-image: url(chrome://easyscreenshot/skin/editoricons.png), -moz-linear-gradient(top, white, #ccc); background-image: url(chrome://easyscreenshot/skin/editoricons.png), linear-gradient(to bottom, white, #ccc); cursor: default; }
    #toolbar > li:nth-of-type(10) { background-position: -231px 7px, 0 0; }
    #display { display: block; margin: 42px auto 21px; }
    #crop { overflow: hidden; }
    #crop, #crop > div, #croptarget > div, #blurcanvas, #pencilcanvas, #rectcanvas, #linecanvas, #circcanvas, #textcanvas, #textinput { position: absolute; }
    #crop > div:not(#croptarget) { background: rgba(0, 0, 0, 0.6); cursor: crosshair; }
    #croptarget { cursor: move; }
    #croptarget > div { background: #ccc; border-radius: 4px; height: 8px; width: 8px; }
    #ctrlnw, #ctrlne { top: -4px; }
    #ctrlne, #ctrlse { right: -4px; }
    #ctrlse, #ctrlsw { bottom: -4px; }
    #ctrlsw, #ctrlnw { left: -4px; }
    #ctrlne, #ctrlsw { cursor: nesw-resize; }
    #ctrlnw, #ctrlse { cursor: nwse-resize; }
    #display.rectcanvas, #display.linecanvas,, #display.circcanvas, #rectcanvas, #linecanvas, #circcanvas { cursor: crosshair; }
    #display.textcanvas, #textcanvas { cursor: text; }
    #display.blurcanvas, #blurcanvas { cursor: url(chrome://easyscreenshot/skin/cursor-blur.png) 7 7, -moz-grab; }
    #display.pencilcanvas, #pencilcanvas { cursor: url(chrome://easyscreenshot/skin/cursor-pencil.png) 2 2, -moz-grab; }
    #textinput { background: transparent; border: none; border-bottom: 1px dashed red; font: bold 14px/18px Arial,Helvetica,sans-serif; z-index: 1; }
    #colorpicker { background: -moz-linear-gradient(bottom, #ccc, white); background: linear-gradient(to top, #ccc, white); padding: 5px; position: fixed; top: 42px; z-index: 1; }
    </style>
    <body>
        <ul id="toolbar">
            <li title="&editor.color.tooltip;">Color</li>
            <li title="&editor.crop.tooltip;">Crop</li>
            <li title="&editor.rectangle.tooltip;">Rectangle</li>
            <li title="&editor.circle.tooltip;">Circle</li>
            <li title="&editor.line.tooltip;">Line</li>
            <li title="&editor.pencil.tooltip;">Pencil</li>
            <li title="&editor.text.tooltip;">Text</li>
            <li title="&editor.blur.tooltip;">Blur</li>
            <li title="&editor.undo.tooltip; (Ctrl+Z)">Undo</li>
            <li title="&editor.local.tooltip; (Ctrl+S)">Local</li>
        </ul>
        <canvas id="display"/>
        <div id="crop" title="&editor.crop.instruction;">
            <div id="croptop"></div>
            <div id="cropleft"></div>
            <div id="cropright"></div>
            <div id="cropbottom"></div>
            <div id="croptarget">
                <div id="ctrlnw"></div>
                <div id="ctrlne"></div>
                <div id="ctrlse"></div>
                <div id="ctrlsw"></div>
            </div>
        </div>
        <input type="text" id="textinput" />
    </body>
</html>
